<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Introduction à XML (eXtensible Markup Language)</title>
      </titleStmt>
      <publicationStmt>
        <distributor><persName xml:id="FC">Florence Clavaud</persName> (Archives nationales
          et Centre Jean-Mabillon de l'Ecole nationale des chartes)</distributor>
        <availability>
          <p>Placé sous licence CC-BY</p>
        </availability>
        <date>2017-11-23</date>
      </publicationStmt>
      <sourceDesc>
        <p>Autres cours rédigés pour des interventions précédentes, notamment pour la
          formation donnée fin 2016 et début 2017 dans le cadre du séminaire PSL ; slides d'Emmanuel Château (qui reprend lui-même le texte de ces cours et le modifie)</p>
      </sourceDesc>
    </fileDesc>
    <!--<revisionDesc>
      <change when="2017-01-05"><name>Emmanuel Château-Dutier</name>, révision</change>
      <change when="2016-04-28"><name>Emmanuel Château-Dutier</name>, création</change>
    </revisionDesc>-->
  </teiHeader>
  <text>
    
    <body>
    <!--
          <div>
            <div>
              <p>On vient de voir qu’un balisage descriptif permettait de <hi rend="bold"
                  >se concentrer sur le contenu du texte plutôt que sur la présentation physique finale du document</hi>.</p>
              <p>Dans une démarche qui privilégie avant tout l’édition du texte, il convient en premier lieu de <hi
                  rend="bold"
                  >rendre la structure du texte explicite, c’est-à-dire de clarifier à la fois les relations hiérarchiques et séquentielles</hi>. La présence du balisage détermine par la suite la possibilité de traiter les éléments pour une transformation.</p>
              <p>Le métalangage informatique XML (Extensible Markup Language) permet le développement de vocabulaires descriptifs de balisages interopérables spécifiques à certains domaines.</p>
              <bibl>cf. Bray, Tim, Paoli, Jean, Sperberg-McQueen, C. Michael, Maler, Eve, et Yergeau, François, Extensible Markup Language (XML) 1.0, Recommandation du W3C, 2008. <ref
                  target="https://www.w3.org/TR/REC-xml/"
                >https://www.w3.org/TR/REC-xml/</ref></bibl>
            </div>
            <div>
              <head>Un modèle de contenu arborescent</head>
              <p>Son <hi rend="bold"
                >modèle de contenu arborescent</hi> est précisément conforme au modèle OHCO.</p>
              <p>S’il offre une grammaire lisible par la machine, il ne présente pas une réelle sémantique et ne peut donc à lui seul spécifier formellement une sémantique.</p>
              <p>XML propose simplement <hi rend="bold"
                  >une solution rigoureuse, compréhensible par les machines, pour définir un langage de balisage descriptif</hi>.</p>
            </div>
            <div>
              <head>Une large utilisation dans le domaine culturel</head>
              <p>La plupart des contenus des bibliothèques numériques aujourd’hui mis à disposition sur le web sont encodés en utilisant un balisage XML. « La large adoption de vocabulaires XML spécialisés comme la TEI rendent disponible une importante information sémantique, mais seulement sous la forme d’une documentation en prose et de pratiques partagées. »</p>
              <bibl>James H Coombs, Allen H Renear, et Steven J DeRose. « Markup Systems and the Future of Scholarly Text Processing.» <title>Communications of the ACM</title> 30, n° 11 (1987): 933-947. <ref
                  target="http://xml.coverpages.org/coombs.html"
                  >http://xml.coverpages.org/coombs.html</ref></bibl>
            </div>
          </div>
        </div>-->
        <div type="slide" xml:lang="fr">
        
           
              <head>Histoire de XML (1) : De SGML à XML</head>
              <!--<list>
                <item>métalangage informatique pour le balisage du texte</item>
                <item><ref target="http://www.iso.org/iso/fr/catalogue_detail.htm?csnumber=16387">norme ISO (ISO 8879:1986)</ref></item>
              </list>-->
              <p>XML (eXtensible Markup Language) est un héritier de SGML (Standard Generalized Markup Language), un métalangage informatique pour le balisage du texte, norme ISO (ISO 8879:1986) elle-même héritière d’un langage descriptif conçu en 1969 par des ingénieurs de la société IBM (Charles Goldfarb, Edward Mosher et Raymond Lorie).</p>
              <p>SGML était puissant et générique, mais aussi à la fois trop souple et complexe.
                Il a surtout été utilisé (et l’est parfois toujours) dans le cadre d’applications lourdes.
                Son utilisation la plus notable a été en fait... le langage HTML (HTML est né en 1989 ; dernières versions : HTML 4.01, décembre 1999, également norme ISO/IEC 15445:2000 ; HTML 5, recommandation octobre 2014) un langage pour la production d’hypertextes (pour le Web).</p>
              <p>Publication en février 1998 par le W3C Consortium des spécifications du métalangage XML 1.0 (<ref target="https://www.w3.org/TR/1998/REC-xml-19980210">https://www.w3.org/TR/1998/REC-xml-19980210</ref>).</p>
                <p>Maîtres mots : simplicité,  clarté, universalité.</p>
              <p>Pour comprendre l’histoire de la conception de XML, voir <ref target="http://www.xml.com/axml/testaxml.htm">The Annotated XML Specification</ref>, de Tim Bray, l’un des pères de XML.</p>
        </div>
            <div type="slide">
              <head>Histoire de XML (2) : un succès immédiat et important</head>
            <!--  <list>
                <item>des spécifications du métalangage XML 1.0</item>
                <item>maîtres mots : simplicité, clarté, universalité</item>
                <item><ref target="http://www.w3.org/TR/xml11">version 1.1</ref> en 2004</item>
              </list>-->
              <p>Les langages et outils permettant de produire, contrôler, échanger, transformer et exploiter des fichiers XML se sont multipliés, souvent associés à des normes du W3C : modèles de documents et de (méta)données, langages de modélisation, de présentation, de programmation, protocoles, …</p>
              <p>Ce métalangage est donc aujourd’hui utilisé partout en informatique, qu’il s’agisse de structurer des informations dont la durée de vie est importante ou d’échanger des informations entre applications, qu’on ait à s’occuper essentiellement de données, essentiellement de documents, ou d’une combinaison des deux.</p>
            </div>
        
          <div type="slide">
            <head>Histoire de XML (3) : XML, depuis la version 1.0</head>
            <p>Depuis 1998, la norme XML a peu évolué.
            </p>
            <list>
              <item>Dernière édition en date de la norme XML 1.0 : 5e édition
                (novembre 2008, cf. <ref target="https://www.w3.org/TR/2008/REC-xml-20081126/">https://www.w3.org/TR/2008/REC-xml-20081126/</ref>).</item>
              <item>Une version 1.1 de la norme a été publiée en février 2004 (2e édition en août 2006, cf. 
                <ref target="http://www.w3.org/TR/2006/REC-xml11-20060816">http://www.w3.org/TR/2006/REC-xml11-20060816</ref>), en particulier pour intégrer les évolutions d’Unicode  ; mais XML 1.1 reste peu utilisé.</item>
            </list>
               
          </div>
         
           <div type="slide">
             <head>Concepts (1) : XML, pour baliser tout type de texte</head>
             <p>Le texte, dans l'univers XML, est vu comme “un ensemble de hiérarchies ordonnées d’objets de contenu” (<foreign rend="italic" xml:lang="en">ordered hierarchies of content objects</foreign>, OHCO) (cf. Voir Biggs Michael et Huitfeldt Claus, <title>Philosophy and Electronic Publishing. Theory and Metatheory in the Development of Text Encoding (1997)</title>. Consultable en ligne à <ref target="http://philo.at/mii/mii/node5.html">http://philo.at/mii/mii/node5.html</ref>).</p>
             <p>Le but d'une opération de structuration est de rendre plus explicite cette abstraction afin de mieux la gérer.</p>
             <p>Fondé sur le principe du balisage (qui consiste à isoler une portion de texte et à la marquer de manière explicite comme ayant un rôle ou étant de nature particulière), ce métalangage autorise l’imbrication des balises et une granularité aussi fine que nécessaire. XML permet donc d’identifier la structure d’un texte et d’informer sur la sémantique des informations qu’il contient, ou encore d’isoler des données.
             </p>
             <p>XML conçu à l’ère de l’hypermédia : liens peuvent être établis entre des sections du même document XML ou entre un document XML et d’autres ressources électroniques, qui peuvent ne pas être du texte.</p>
           
           </div>
      <div type="slide">
        <head>Concepts (2) : du document XML bien formé au document valide</head>
        <p>Si le fichier XML respecte les quelques règles syntaxiques définies dans les spécifications XML, on parle de <hi rend="bold">document XML bien formé</hi>.</p>
             <p>Un <hi rend="bold">modèle</hi> (la liste des balises utilisables, leurs noms, les contraintes de leur emploi : position, cardinalité, type de contenu), ou grammaire, peut être défini, sous la forme d’une DTD ou d’un schéma, pour contrôler la qualité du document encodé (si un document XML est conforme à un modèle donné, on parle de <hi rend="bold">document XML valide</hi>).</p>
             
               <p>Un bon modèle fournit de quoi baliser une catégorie de textes conformément à la nature intrinsèque de l’information, d’expliciter tout ce qui doit l’être, y compris la sémantique implicite.</p>
            
             
             
           </div>
      <div type="slide">
        <head>Enjeux (1) : un texte (bien) structuré = des informations exploitables</head>
        <p><hi rend="bold">Accès, indexation et recherche de l’information améliorées</hi> : on peut avec certains outils informatiques indexer un (ou un ensemble de) document(s) XML en exploitant son (leur) marquage structurel, ce qui permet des recherches fines multi-critères et améliore considérablement la qualité des réponses par rapport à une recherche plein texte dans un document non structuré.</p>
        
        <p>On peut aussi explorer un document XML en tant qu’arbre, en utilisant notamment le langage XPath, ou encore manipuler les noeuds de cet arbre  à l’aide du langage DOM (Document Object Model).</p>
        <p><hi rend="bold">XML, un format de stockage, pour autant de formats de diffusion qu’on le souhaite</hi> : après transformation par programme(s) en un ou plusieurs formats dédiés à un usage donné, le contenu structuré d’un document XML peut être consulté et diffusé sous forme imprimée (on peut transformer un document XML en fichier PDF par ex.), sous forme électronique (par ex. au format HTML...) ; ces formats de sortie peuvent être préparés à l’avance ou générés dynamiquement.
          Ceci fait de XML un <hi rend="bold">format pivot pour les nouvelles chaînes éditoriales</hi>.</p>
      </div>   
      <div type="slide">
        <head>Enjeux (2) : un texte (bien) structuré = des informations réutilisables</head>
      
        <list>
          <item>Norme <hi rend="bold">simple, sans ambiguité, permettant à un humain de lire l’information produite</hi></item>
          <item>Les fichiers XML sont de simples fichiers texte. XML supporte en outre un <hi rend="bold">très grand nombre de systèmes d’écriture</hi> (il utilise le standard Unicode ; le codage par défaut de XML est UTF-8)</item>
          <item>Une norme universelle, concentrée sur le contenu informationnel et ne traitant pas de son utilisation, <hi rend="bold">indépendante des plates-formes informatiques</hi></item>
          <item>S’il y a un enjeu de pérennisation de l’information traitée, utiliser XML -  et si possible une grammaire reconnue internationalement - pour structurer et échanger cette information est considéré comme une bonne pratique, et <hi rend="bold">les documents XML produits sont de bons candidats pour l’archivage pérenne</hi> (cf. par ex. en France le <ref target="http://references.modernisation.gouv.fr/interoperabilite">Référentiel général d’interopérabilité</ref>, dont la version 2 a été officialisée en avril 2016). </item>
        </list>
      </div>
        <div type="slide">
          <head>Enjeux (3) : « Passer à XML » a un coût...</head>
          <p>Cependant lorsqu’une communauté choisit et met en œuvre un ou plusieurs modèles XML pour ses besoins propres, elle peut :
           <list><item>constituer des collections homogènes de documents ;
</item>            <item>répartir éventuellement la charge de leur production et de leur exploitation ;</item>
            <item>gagner en autonomie par rapport aux logiciels informatiques ;</item>
            <item>partager des outils et des savoir-faire ;</item>
            <item>échanger ses fichiers</item></list>
            
            bref gérer intelligemment son information documentaire</p>
        </div>
      
     
         
       
       
      
     
        <div type="slide" xml:lang="fr">
         
            <head>Exemple de document <hi>XML</hi></head>
            <p>
            
<egXML xmlns="http://www.tei-c.org/ns/Examples">
  <![CDATA[<?xml version="1.0" encoding="UTF-8"?>]]>
  <doc>
    <p n="1">Ceci est un paragraphe.</p>
    <p n="2">Ce paragraphe-ci concerne <persName>Victor Hugo</persName>.</p>
  </doc></egXML></p>
           
            <p>Un document XML consiste en une séquence de caractères lisibles par l’homme. C’est <hi
              rend="bold"
              >un simple fichier texte</hi> qui ne contient pas de code additionnel ou de données binaires.</p>
            <p>Seulement, vous pouvez constater que ce document comporte certaines séquences de caractères régulières.</p>
            <p>La première ligne de ce document s’appelle une <soCalled>déclaration XML</soCalled> elle appartient au <soCalled>prologue</soCalled> du document. C’est une instruction qui permet d’indiquer qu’il s’agit d’un document XML et la version du langage.</p>
            <p>On peut également préciser l’encodage des caractères (par défaut UTF-8).</p>
            <p>Ici on déclare l’utilisation de l’encodage de caractère UTF-8 (pour Universal Character Set) qui permet de représenter la plupart des caractères du « répertoire universel de caractères codés » initialement développé par l’<ref
              target="http://www.iso.org/iso/fr/catalogue_detail.htm?csnumber=51273"
              >ISO (ISO/CEI 10646)</ref>, aujourd’hui entièrement compatible avec le standard Unicode.</p>
            <p>Le répertoire Unicode peut contenir plus d’un million de caractères.<list>
              <item>cf. <ref target="https://fr.wikipedia.org/wiki/UTF-8"
                >https://fr.wikipedia.org/wiki/UTF-8</ref></item>
              <item>cf. <ref target="http://www.cs.tut.fi/~jkorpela/unicode/guide.html"
                >Jukka Korpela. "Guide to the Unicode standard"</ref></item>
            </list></p>
          
      
     
        </div>
        <div type="slide" xml:lang="fr">
          
            <head>Spécification de l’<hi>encodage</hi></head>
            <!-- @todo traiter l’exemple correctement -->
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
              <![CDATA[<?xml version="1.0" encoding="UTF-8"?>]]>
              <doc>
                <p n="1">Ceci est un paragraphe.</p>
                <p n="2">Ce paragraphe-ci concerne <persName>Victor Hugo</persName>.</p>
              </doc></egXML>
          <p>Les séquences <code>&lt;</code>, <code>&gt;</code> et <code>&lt;/</code> délimitent les balises : <code>&lt;div&gt;&lt;/div&gt;</code>. Vous remarquez que ces <soCalled>balises</soCalled>, ou <soCalled>markup</soCalled>, ou encore <soCalled>étiquettes (tag)</soCalled>, sont appariées : à chaque balise ouvrante correspond une balise fermante qui se distingue en débutant par la séquence <code>&lt;/</code>. Les balises et leur contenu forment un <soCalled>élement XML</soCalled>.</p>
          <p>Ici, le document présente également des <soCalled>attributs</soCalled>. Ce sont des paires nom-valeur qui se rattachent aux <soCalled>éléments</soCalled>. Ils ont la forme <code>nom='valeur'</code> équivalente à <code>nom="valeur"</code></p>
          <p>Notez la syntaxe particulière des <soCalled>éléments vides</soCalled> : <code>&lt;div&gt;&lt;/div&gt;</code> = &lt;div/&gt;</p>
        
            
          
           
           
        </div>
        <div type="slide" xml:lang="fr">
        
            <head>Le corps du document XML : un <hi>arbre d’éléments</hi></head>
          <p>Les éléments permettent de décomposer le texte en unités d’information</p>
          <figure>
            
            <graphic url="xml01.svg"/>
            <!--<desc>Élément XML</desc>-->
          </figure>
         <!-- <p><egXML xmlns="http://www.tei-c.org/ns/Examples">
            <titre>Le corps du document XML : un arbre d’éléments</titre>
          </egXML>
          </p>-->
            
          <p>La portion de texte ainsi isolée est marquée par une balise de début (<soCalled>balise ouvrante</soCalled>) et par une balise de fin (<soCalled>balise fermante</soCalled>)</p>
            
            <p>Tout élément a un nom (parfois appelé identificateur générique), ici c’est "date".</p>
            
            <p>Un élément peut contenir du texte et/ou d’autres éléments, ou être vide.</p>
            
            <p>Il existe un et un seul élément englobant tous les autres, encodé en premier, juste après le prologue : c’est l’élément racine. </p>
           
            <egXML xmlns="http://www.tei-c.org/ns/Examples">
              <p>Exemple de contenu mixte avec une <name>entité-nommée</name><pb/></p>
            </egXML>
          
         
        </div>
        <div type="slide" xml:lang="fr">
       
            <head>Les <hi>attributs</hi></head>
            <p>Les attributs précisent la signification des éléments, leur ajoutent des caractéristiques.</p>
         <!--   <egXML xmlns="http://www.tei-c.org/ns/Examples">
              <date when="2011-03-09">9 mars 2011</date>
            </egXML>-->
          <figure>
            <graphic url="xml02.svg"/>
            <desc>Attribut XML</desc>
          </figure>
            <list>
              <item>toujours saisis à l’intérieur de la balise ouvrante de l’élément</item>
              <item>syntaxe : <code>nomAttribut="valeur"</code></item>
              <item>le nom de l’attribut obéit aux contraintes syntaxiques des noms XML</item>
              <item>la valeur est encadrée par des guillemets simples ou doubles</item>
              <item>L’ordre des attributs n’est pas prescrit pour un élément donné</item>
              <item>Un attribut doit nécessairement avoir une valeur, même si cette valeur est nulle <code>attribut=""</code></item>
              <item>Pour un même élément, il ne peut y avoir deux attributs de même nom <code>rend="bold center"</code></item>
            </list>
          
         
            <p>Les attributs ne contiennent que du texte, ils peuvent donc servir pour stocker de l’information qui n'est pas elle-même structurée.</p>
            <p>En principe ne sont pas destinés à ajouter du contenu à l’élément, donc leur valeur n’est pas destinée à être affichée telle quelle dans un format de sortie. Mais ils pourront être exploités par des applications informatiques pour faire par exemple des index, ils peuvent servir à identifier les éléments (attributs de type ID), à établir des renvois (attributs de type IDREF).</p>
          
        </div>
        <div type="slide" xml:lang="fr">
      
            <head>Règles pour l’écriture des noms XML (parfois appelés identificateurs génériques) :</head>
            <list>
              <item>la chaîne de caractères formant le nom peut contenir les caractères alphanumériques (lettres de <code>a</code> à <code>z</code>, et de <code>A</code> à <code>Z</code>, chiffres de <code>0</code> à <code>9</code>, caractères non latins), le trait sous la ligne <code>_</code>, le trait d’union <code>-</code> et le point <code>.</code> (à l’exclusion de tout autre signe de ponctuation ou espace) ;</item>
              <item>un nom ne peut pas commencer par un nombre, ni par un point, ni par un trait d’union ;</item>
              <item>le nom ne peut pas commencer par <code>xml</code> (quelle que soit la casse utilisée).</item>
              <item>Attention, XML est sensible à la casse !</item>
            </list>
          
        </div>
        <div type="slide" xml:lang="fr">
         
            <head>Les <hi>entités</hi></head>
          <list>
            <item><soCalled>entités caractères prédéfinies</soCalled> pour saisir certains caractères que l’on doit obligatoirement coder ( <![CDATA[<]]>, <![CDATA[>]]>, <![CDATA[&]]>, <![CDATA["]]>, <![CDATA[']]> : caractères codés au moyen des entités <code>lt</code>, <code>gt</code>, <code>amp</code>, <code>quot</code>, <code>apos</code>)</item>
            <item>entités texte, servant à donner un nom à des expressions ou phrases souvent répétées</item>
            <item>Entités externes : <list><item>texte : fragments XML formant chacun un fichier</item><item>non parsées (fichiers non XML tels qu’images, enregistrements sonores…)	</item></list></item>
          </list>
          <p>Un appel d’entité dans le corps du document XML se fait en utilisant l’esperluette (<![CDATA[&]]>), suivi du nom donné à l’entité, suivi du signe <![CDATA[;]]></p>
         
           
          
        </div>
        <div type="slide" xml:lang="fr">
         <head>Autres composants</head>
        
           <p>Les <hi rend="bold">commentaires</hi> :
             <list>
               <item>Servent à… commenter, ce qui est utile pour documenter ce qu’on fait ou consigner des notes. Ne sont pas destinés aux programmes informatiques, qui les ignorent par défaut.</item>
               <item>Commencent par <code>&lt;!--</code> et se terminent par <code>--&gt;</code>. Le double trait d’union « -- » ne doit pas apparaître au sein d’un commentaire</item>
             </list>
           </p>
              <p>Les <hi rend="bold">instructions de traitement</hi> :
              <list>
                <item>Commencent par <code>&lt;?</code> et se terminent par <code>?&gt;</code>.</item>
                <item>Définissent une cible (fournissent le nom de l’application à qui elles sont destinées, par ex.), et des arguments</item>
              </list>
              Exemples :
              <egXML xmlns="http://www.tei-c.org/ns/Examples">
                <![CDATA[<?xml-stylesheet href="maCss.css" type="text/css" ?>]]>
              </egXML>
                ou encore
                <egXML xmlns="http://www.tei-c.org/ns/Examples">
                  <![CDATA[ <?xml-model href="schema/monSchemaTei.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>]]>
                 </egXML>
            </p>
          <p>Les <hi rend="bold">sections CDATA</hi> : des sections de caractères non parsées. Elles commencent par <code>&lt;![CDATA[</code> et se terminent par <code>]]&gt;</code>.</p>
            </div>
          
         
          
      
        <div type="slide" xml:lang="fr">
         
            <head>Les espaces de noms XML</head>
          <p>De plus en plus souvent, afin de faciliter les échanges en évitant toute ambiguité, les noms des éléments et attributs sont rattachés à un namespace (espace de noms).</p>
          <p><list>
            <item>Formellement un espace de noms est défini par son URI (namespace-uri).</item>
            <item>Si on utilise un ou plusieurs espaces de noms, l’espace de noms (ou les espaces de noms) utilisé(s) doivent être déclarés dans le fichier XML. On le fait le plus souvent en ajoutant un (ou plusieurs) attribut(s) xmlns à l’élément racine du fichier. Un attribut xmlns a pour valeur l’URI d’un espace de noms.</item>
            <item>L’espace de noms peut être déclaré comme l’espace de noms par défaut, dans ce cas l’URI n’est pas associée à un code donné et les noms des attributs et éléments ne sont pas préfixés.</item>
            <item>Un code peut en effet représenter l’espace de noms, il est alors utilisé à la place de l’URI pour préfixer attributs et éléments ; ce code est appelé préfixe (namespace-prefix).</item>
          </list></p>
        <p>Exemple : 
<egXML xmlns="http://www.tei-c.org/ns/Examples">
  <TEI>
    <teiHeader><!-- autres éléments --></teiHeader>
      <text><!-- autres éléments --></text>
  </TEI>
</egXML>
          
          Ici l’espace de noms par défaut est défini par l’URI http://www.tei-c.org/ns/1.0, c’est l’espace de noms TEI. Tous les éléments du fichier XML qui sont descendants de l’élément racine et qui ne sont pas préfixés sont dans cet espace de noms.</p>
          
        </div>
        <div type="slide" xml:lang="fr">
                
            <head>Règles à respecter pour avoir un document XML bien formé</head>
          <p>Les principales règles sont les suivantes :</p>
            <list>
              <item>concordance entre l’encodage du document et sa déclaration XML ;</item>
              <item>existence des fichiers déclarés (déclaration de DTD, déclaration d’entités externes) et concordance entre l’encodage des fichiers entités externes et leur déclaration XML ;</item>
              <item>forme des appels d’entités ;</item>
              <item>présence de balises ouvrantes et fermantes appariées, imbrication des balises sans chevauchement ;</item>
              <item>respect des spécifications relatives aux noms XML (noms d’éléments et d’attributs) ;</item>
              <item>unicité des attributs dans un même élément, aucun attribut sans valeur ;</item>
              <item>forme des commentaires.</item>
            </list>
            <p>Le contrôle se fait par <soCalled>analyse syntaxique</soCalled> ou <soCalled>parsing</soCalled> (avec des outils appelés <soCalled>parsers</soCalled>).</p>
          
        </div>
        <div type="slide" xml:lang="fr">
          
            <head>Bien formé, oui ou non ?</head>
            <list>
              <item><![CDATA[<segment>du texte</segment>]]></item>
              <item><![CDATA[<segment><article>du</article><nom>texte</nom></segment>]]></item>
              <item><![CDATA[<segment><article>du <nom></article> texte</nom></segment>]]></item>
              <item><![CDATA[<segment type="text">du texte</segment>]]></item>
              <item><![CDATA[<segment type='text'>du texte</segment>]]></item>
              <item><![CDATA[<segment type=text>du texte</segment>]]></item>
              <item><![CDATA[<segment type="text">du texte<segment/>]]></item>
              <item><![CDATA[<segment type="text">du texte<lacune/></segment>]]></item>
              <item><![CDATA[<segment type="text">du texte< /segment>]]></item>
              <item><![CDATA[<segment type="text">du texte</Segment>]]></item>
              <item><![CDATA[<segment type="text" type="toto">du texte</segment>]]></item>
            </list>
          
        </div>
        <div type="slide" xml:lang="fr">
       
            <head><hi>Modèles de documents</hi> XML</head>
            <p>Les modèles XML définissent les contraintes que doit respecter une certaine classe de documents</p>
          <p>Diverses syntaxes peuvent être utilisées pour écrire de tels modèles :<list>
                <item>celle des DTD (partie intégrante de la norme XML 1.0), la plus utilisée encore aujourd’hui ;</item>
                <item>celle, exprimée en XML, des schémas XML (norme du W3C publiée en mai 2001 ; 2<hi
                    rend="superscript">e</hi> édition octobre 2004 ; voir <ref
                    target="http://www.w3.org/XML/Schema"
                  >http://www.w3.org/XML/Schema</ref>) ;</item>
                <item>celle des schémas RelaxNG (norme ISO/IEC 19757-2 depuis 2003, amendée en 2008 ; voir <ref
                    target="http://www.relaxng.org/">http://www.relaxng.org/</ref>).</item>
              </list>
            </p>
          <p>Les schémas, qui peuvent s’écrire en XML quelle que soit la syntaxe choisie, permettent de contraindre plus fortement que les DTD le contenu des attributs et des éléments, et gèrent les espaces de noms.</p>
          <p> Un parseur sachant interpréter la syntaxe utilisée pourra vérifier qu’un document est conforme à un modèle donné (est valide).
            Exemples de parseurs : ceux intégrés aux éditeurs XML, aux navigateurs Web ; xmllint dans la librairie libxml, etc.</p>
            <p>Beaucoup d’applications XML sont validantes, ainsi un processeur XSLT n’opérera de transformation à partir d’un document XML associé à un modèle que si ce document XML est valide.Beaucoup d’applications XML sont validantes, ainsi un processeur XSLT n’opérera de transformation à partir d’un document XML associé à un modèle que si ce document XML est valide.</p>
         
          
         
        </div>
      <div type="slide" xml:lang="fr">
      
          <head>Orientations bibliographiques</head>
          <list>
            <item>A gentle introduction to XML : <ref
              target="http://www.tei-c.org/release/doc/tei-p5-doc/en/html/SG.html"
              >http://www.tei-c.org/release/doc/tei-p5-doc/en/html/SG.html</ref></item>
            <item>XML en concentré : manuel de référence / Elliotte Rusty Harold &amp; W. Scott Means ; traduction de Philippe Ensarguet, Frédéric Laurent. - 3<hi rend="superscript">e</hi> éd. - Paris : O’Reilly, 2005. ISBN 2-84177-353-1 EAN 9782841773534 ;</item>
            <item>L’espace XML francophone : actualités, discussions, articles et billets, sur le site Web <ref target="http://xmlfr.org/">http://xmlfr.org/</ref></item>
          </list>
        
      </div>
    
    </body>
   
  </text>
</TEI>
